# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
parameters:
- name: isProduction
  displayName: isProduction
  type: boolean
  default: False
- name: publishWithoutPatchVersion
  displayName: publishWithoutPatchVersion
  type: boolean
  default: False

trigger:
- master

name: $(Build.BuildId)

stages:
  - stage: build_lf_cdn
    jobs:
      - job: build_lf_cdn

        pool:
          name: Release Build Agents
          demands:
          - Agent.OS -equals Linux

        workspace:
            clean: all

        variables:
        - group: LFNPMPackages
        - name: NODE_EXTRA_CA_CERTS
          value: '/etc/ssl/certs/ca-certificates.crt'
        - name: MAJOR_VERSION
          value: '3'
        - name: MINOR_VERSION
          value: '0'
        - name: PATCH_VERSION
          value: '3'


        - name: CURRENT_VERSION
          ${{ if eq(parameters.publishWithoutPatchVersion, True)}}:
            value: '$(MAJOR_VERSION).$(MINOR_VERSION)'
          ${{ if and(eq(parameters.isProduction, True), eq(parameters.publishWithoutPatchVersion, False))}}:
            value: '$(MAJOR_VERSION).$(MINOR_VERSION).$(PATCH_VERSION)'
          ${{ if and(eq(parameters.isProduction, False), eq(parameters.publishWithoutPatchVersion, False))}}:
            value: '$(MAJOR_VERSION).$(MINOR_VERSION).$(PATCH_VERSION)'

        - name: NpmPackageVersion
          ${{ if eq(parameters.publishWithoutPatchVersion, True)}}:
            value: '$(CURRENT_VERSION).$(PATCH_VERSION)'
          ${{ if and(eq(parameters.isProduction, True), eq(parameters.publishWithoutPatchVersion, False))}}:
            value: '$(CURRENT_VERSION)'
          ${{ if and(eq(parameters.isProduction, False), eq(parameters.publishWithoutPatchVersion, False))}}:
            value: '$(CURRENT_VERSION)-preview-$(Build.BuildNumber)'

        - name: NpmPublish
          ${{ if eq(parameters.publishWithoutPatchVersion, True)}}:
            value: false
          ${{ if and(eq(parameters.isProduction, True), eq(parameters.publishWithoutPatchVersion, False))}}:
            value: true
          ${{ if and(eq(parameters.isProduction, False), eq(parameters.publishWithoutPatchVersion, False))}}:
            value: true

        - name: CDN_Overwrite
          ${{ if eq(parameters.publishWithoutPatchVersion, True)}}:
            value: true
          ${{ if and(eq(parameters.isProduction, True), eq(parameters.publishWithoutPatchVersion, False))}}:
            value: false
          ${{ if and(eq(parameters.isProduction, False), eq(parameters.publishWithoutPatchVersion, False))}}:
            value: true

        - name: CDNFolder
          ${{ if eq(parameters.publishWithoutPatchVersion, True)}}:
            value: '$(CURRENT_VERSION)'
          ${{ if and(eq(parameters.isProduction, True), eq(parameters.publishWithoutPatchVersion, False))}}:
            value: '$(CURRENT_VERSION)'
          ${{ if and(eq(parameters.isProduction, False), eq(parameters.publishWithoutPatchVersion, False))}}:
            value: 'beta'


        steps:

        - script: echo '$(npmauthtoken)'
          displayName: 'Echo npmauthtoken'

        - script: echo '$(Build.BuildNumber)'
          displayName: 'Echo build number'

        - script: echo '$(NpmPackageVersion)'
          displayName: 'Echo NPM package version'

        - task: NodeTool@0
          displayName: 'Use Node 14.x'
          inputs:
            versionSpec: '14.x'
          env:
            NPM_AUTH_TOKEN: $(npmauthtoken)

        - task: Npm@1
          displayName: 'npm update npm'
          inputs:
            command: custom
            verbose: true
            customCommand: 'install -g npm@8'
          env:
            NPM_AUTH_TOKEN: $(npmauthtoken)

        - script: 'git config user.email "fakebuilduser@laserfiche.com"'
          displayName: 'Config git so we can use npm version (user.email)'

        - script: 'git config user.name "fakebuilduser"'
          displayName: 'Config git so we can use npm version (user.name)'

        - script: 'node -v'
          displayName: 'Echo node version'

        - task: Npm@1
          displayName: 'npm ci'
          inputs:
            command: custom
            verbose: true
            customCommand: 'ci'
          env:
            NPM_AUTH_TOKEN: $(npmauthtoken)

        - task: Npm@1
          displayName: 'npm run lint'
          inputs:
            command: custom
            verbose: true
            customCommand: 'run lint'
          timeoutInMinutes: 5
          env:
            NPM_AUTH_TOKEN: $(npmauthtoken)


        - task: Npm@0
          displayName: 'npm version @laserfiche/types-lf-ui-components'
          inputs:
            cwd: './npm-publish'
            command: version
            arguments: '$(NpmPackageVersion) --no-git-tag-version'
          env:
            NPM_AUTH_TOKEN: $(npmauthtoken)

        - task: Npm@1
          displayName: 'npm run build ui-components'
          inputs:
            command: custom
            verbose: true
            customCommand: 'run build-ui-components-prod'
          env:
            NPM_AUTH_TOKEN: $(npmauthtoken)
            NpmPackageVersion: $(NpmPackageVersion)

        - task: CmdLine@2
          displayName: 'move intellisense-imports.d.ts to entry.d.ts'
          inputs:
            script: 'mv -f ./dist/ui-components/intellisense-imports.d.ts ./dist/ui-components/entry.d.ts'

        - task: CopyFiles@2
          displayName: 'Copy ui-components files to ArtifactStagingDirectory/ui-components/'
          inputs:
            SourceFolder: './dist/ui-components'
            Contents: '**'
            TargetFolder: '$(Build.ArtifactStagingDirectory)/ui-components'
            CleanTargetFolder: false
            OverWrite: true

        - task: Npm@1
          displayName: 'npm run tsc-cdn: generate declaration files (.d.ts) for lf-cdn'
          inputs:
            command: custom
            verbose: false
            customCommand: 'run tsc-cdn'
          timeoutInMinutes: 5
          env:
            NPM_AUTH_TOKEN: $(npmauthtoken)

        - task: Npm@1
          displayName: 'npm run api-extractor: bundle declaration files'
          inputs:
            command: custom
            verbose: false
            customCommand: 'run api-extractor'
          timeoutInMinutes: 5
          env:
            NPM_AUTH_TOKEN: $(npmauthtoken)

        - task: gulp@1
          displayName: 'gulp processTypesFile: clean up bundled file'
          inputs:
            targets: 'processTypesFile'
            gulpjs: 'node_modules/gulp/bin/gulp.js'
            enableCodeCoverage: false

        - task: CmdLine@2
          displayName: 'move enums.js to npm-publish'
          inputs:
            script: 'cp ./dist/ui-components/esm2015/shared/enums.js ./npm-publish/index.js'

        - task: Npm@1
          displayName: 'npm pack local npm-publish'
          inputs:
            command: 'custom'
            workingDir: './npm-publish'
            customCommand: 'pack'
          env:
            NPM_AUTH_TOKEN: $(npmauthtoken)

        - task: Npm@1
          displayName: 'npm install types npm package from npm pack'
          inputs:
            command: custom
            verbose: true
            customCommand: 'install ./npm-publish/laserfiche-types-lf-ui-components-$(NpmPackageVersion).tgz'
          env:
            NPM_AUTH_TOKEN: $(npmauthtoken)

        - task: gulp@1
          displayName: 'gulp replaceVersionInGettingStarted'
          inputs:
            targets: 'replaceVersionInGettingStarted'
            gulpjs: 'node_modules/gulp/bin/gulp.js'
            arguments: '--npmVersion $(NpmPackageVersion) --cdnVersion $(CURRENT_VERSION)'
            enableCodeCoverage: false

        - task: Npm@1
          displayName: 'npm run build-lf-documentation-prod'
          inputs:
            command: custom
            verbose: false
            customCommand: 'run build-lf-documentation-prod'
          timeoutInMinutes: 5
          env:
            NPM_AUTH_TOKEN: $(npmauthtoken)

        - task: Npm@1
          displayName: 'npm run build-lf-cdn-prod'
          inputs:
            command: custom
            verbose: false
            customCommand: 'run build-lf-cdn-prod'
          timeoutInMinutes: 5
          env:
            NPM_AUTH_TOKEN: $(npmauthtoken)

        - task: Npm@1
          displayName: 'npm create lf-ms-office-lite.css'
          inputs:
            command: custom
            verbose: false
            customCommand: 'run sass-ms'
          timeoutInMinutes: 5
          env:
            NPM_AUTH_TOKEN: $(npmauthtoken)

        - task: Npm@1
          displayName: 'create lf-laserfiche-lite.css'
          inputs:
            command: custom
            verbose: false
            customCommand: 'run sass-lf'
          timeoutInMinutes: 5
          env:
            NPM_AUTH_TOKEN: $(npmauthtoken)

        - task: gulp@1
          displayName: 'gulp renameMainWebpackChunk'
          inputs:
            targets: 'renameMainWebpackChunk'
            gulpjs: 'node_modules/gulp/bin/gulp.js'
            enableCodeCoverage: false

        - task: gulp@1
          displayName: 'gulp renameRuntimeWebpackChunk'
          inputs:
            targets: 'renameRuntimeWebpackChunk'
            gulpjs: 'node_modules/gulp/bin/gulp.js'
            enableCodeCoverage: false

        - task: gulp@1
          displayName: 'gulp renamePolyfillsWebpackChunk'
          inputs:
            targets: 'renamePolyfillsWebpackChunk'
            gulpjs: 'node_modules/gulp/bin/gulp.js'
            enableCodeCoverage: false

        - script: '(cat ./dist/lf-cdn/main.js; echo ""; cat ./dist/lf-cdn/polyfills.js; echo ""; cat ./dist/lf-cdn/runtime.js; echo ""; echo "//# sourceMappingURL=main.js.map") > ./dist/lf-cdn/lf-ui-components.js'
          displayName: 'concatenate runtime.js, main.js, and polyfills.js into lf-ui-components.js'

        - script: '(cat ./dist/lf-documentation/runtime.js; echo ""; cat ./dist/lf-documentation/polyfills.js; echo ""; cat ./dist/lf-documentation/main.js; echo) > ./dist/lf-documentation/lf-documentation.js'
          displayName: 'concatenate runtime.js, main.js, and polyfills.js into lf-documentation.js'

        - task: gulp@1
          displayName: 'gulp replaceScriptsInIndexHtml'
          inputs:
            targets: 'replaceScriptsInIndexHtml'
            gulpjs: 'node_modules/gulp/bin/gulp.js'
            arguments: '--buildVersion $(NpmPackageVersion)'
            enableCodeCoverage: false

        - task: gulp@1
          displayName: 'gulp replaceVersionInOutputVariables'
          inputs:
            targets: 'replaceVersionInOutputVariables'
            gulpjs: 'node_modules/gulp/bin/gulp.js'
            arguments: '--buildVersion $(CDNFolder) --overwrite $(CDN_Overwrite)'
            enableCodeCoverage: false

        - task: CopyFiles@2
          displayName: 'Copy npm-publish files to ArtifactStagingDirectory/npm/'
          inputs:
            SourceFolder: './npm-publish'
            Contents: '*'
            TargetFolder: '$(Build.ArtifactStagingDirectory)/npm'
            CleanTargetFolder: false
            OverWrite: true

        - task: CopyFiles@2
          displayName: 'Copy output_variables.json to ArtifactStagingDirectory/'
          inputs:
            SourceFolder: '$(System.DefaultWorkingDirectory)/builds'
            Contents: 'output_variables.json'
            TargetFolder: '$(Build.ArtifactStagingDirectory)/'
            CleanTargetFolder: false
            OverWrite: true

        # using angular theme indigo-pink.css from npm package for use on CDN
        - task: CopyFiles@2
          displayName: 'Copy indigo-pink.css file to ArtifactStagingDirectory/files/'
          inputs:
            SourceFolder: './node_modules/@angular/material/prebuilt-themes/'
            Contents: |
              indigo-pink.css
            TargetFolder: '$(Build.ArtifactStagingDirectory)/files/'
            CleanTargetFolder: false
            OverWrite: true

        - task: CopyFiles@2
          displayName: 'Copy .js files and index.html to ArtifactStagingDirectory/files/'
          inputs:
            SourceFolder: './dist/lf-documentation'
            Contents: |
              lf-documentation.js
              polyfills.js
              index.html
              favicon.ico
              3rdpartylicenses.txt
              file.svg
              folder.svg
              lf-16.png
              lf-80.png
              chrome-logo.png
              lf_addin_icons.svg
              edge-logo.png
              firefox-logo.png
              styles.css
              lf-laserfiche-lite.css
              lf-ms-office-lite.css
              lf-laserfiche-lite.css.map
              lf-ms-office-lite.css.map
            TargetFolder: '$(Build.ArtifactStagingDirectory)/files/'
            CleanTargetFolder: false
            OverWrite: true

        - task: CopyFiles@2
          displayName: 'Copy lf-cdn .js files to ArtifactStagingDirectory/files/'
          inputs:
            SourceFolder: './dist/lf-cdn'
            Contents: |
              lf-ui-components.js
              main.js.map
              runtime.js.map
              polyfills.js.map
            TargetFolder: '$(Build.ArtifactStagingDirectory)/files/'
            CleanTargetFolder: false
            OverWrite: true


        - bash: |
            echo "##vso[task.setvariable variable=NpmPackageVersion;isOutput=true]$(NpmPackageVersion)"
            echo "##vso[task.setvariable variable=NpmPublish;isOutput=true]$(NpmPublish)"
          name: pipelineVariables
          displayName: 'Create pipeline variables to pass into next stage'


        - task: PublishBuildArtifacts@1
          displayName: 'Publish Artifact: CDN_Content'
          inputs:
            ArtifactName: 'CDN_Content'

  - stage: ng_test
    dependsOn: build_lf_cdn
    jobs:
      - job: ng_test

        pool:
          name: Release Build Agents
          demands: Agent.OS -equals Windows_NT

        workspace:
          clean: all

        variables:
        - group: LFNPMPackages
        - name: NpmPackageVersion
          value: $[ stageDependencies.build_lf_cdn.build_lf_cdn.outputs['pipelineVariables.NpmPackageVersion'] ]
        - name: NpmPublish
          value: $[ stageDependencies.build_lf_cdn.build_lf_cdn.outputs['pipelineVariables.NpmPublish'] ]

        steps:
        - task: NodeTool@0
          displayName: 'Use Node 14.x'
          inputs:
            versionSpec: '14.x'

        - powershell: 'node -v'
          displayName: 'Check node version'


        - task: Npm@1
          displayName: 'npm install -g @angular/cli'
          inputs:
            command: custom
            verbose: false
            customCommand: 'install -g @angular/cli@12'
          env:
            NPM_AUTH_TOKEN: $(npmauthtoken)

        - task: Npm@1
          displayName: 'npm install -g sass'
          inputs:
            command: custom
            verbose: false
            customCommand: 'install -g sass'
          env:
            NPM_AUTH_TOKEN: $(npmauthtoken)

        - task: Npm@1
          displayName: 'npm install'
          inputs:
            command: 'install'
          env:
            NPM_AUTH_TOKEN: $(npmauthtoken)

        - script: echo "$(NpmPackageVersion)"
          displayName: 'echo environment variables'
          env:
            NpmPackageVersion: $(NpmPackageVersion)

        - task: DownloadBuildArtifacts@0
          displayName: 'Download artifact npm-publish files to artifact directory'
          inputs:
            buildType: 'current'
            downloadType: 'specific'
            itemPattern: 'CDN_Content/npm/*'
            downloadPath: '$(System.ArtifactsDirectory)'

        - task: Npm@1
          displayName: 'npm install npm packed package from Download Artifact'
          inputs:
            command: custom
            verbose: true
            customCommand: 'install $(System.ArtifactsDirectory)/CDN_Content/npm/laserfiche-types-lf-ui-components-$(NpmPackageVersion).tgz'
          env:
            NPM_AUTH_TOKEN: $(npmauthtoken)
            NpmPackageVersion: $(NpmPackageVersion)

        - powershell: 'New-Item ./dist/lf-cdn -ItemType directory -Force'
          displayName: 'create an empty ./dist/lf-cdn folder'

        - task: DownloadBuildArtifacts@0
          displayName: 'Download artifact ui-components files to artifact directory'
          inputs:
            buildType: 'current'
            downloadType: 'specific'
            itemPattern: 'CDN_Content/ui-components/**'
            downloadPath: '$(System.ArtifactsDirectory)'

        - task: CopyFiles@2
          displayName: 'Copy lf-ui-components to ./dist/ui-components/'
          inputs:
            SourceFolder: '$(System.ArtifactsDirectory)/CDN_Content/ui-components/'
            Contents: '**'
            TargetFolder: './dist/ui-components'
            CleanTargetFolder: false
            OverWrite: true

        - task: PowerShell@2
          displayName: 'check if lf-ui-components.js exists'
          inputs:
            targetType: 'inline'
            script: |
              if(Test-Path -Path "./dist/lf-cdn/lf-ui-components.js"){
              write-host("successfully downloaded lf-ui-components.js to ./dist/lf-cdn!")
              }else {
              write-host("lf-ui-components.js not found in ./dist/lf-cdn.")
              exit 1
              }

        - task: Npm@1
          displayName: 'npm rebuild'
          inputs:
            command: 'custom'
            customCommand: 'rebuild'
          env:
            NPM_AUTH_TOKEN: $(npmauthtoken)

        - powershell: 'ng test --watch=false --browsers=ChromeHeadless --reporters "junit,progress"'
          displayName: 'Run unit tests'
          continueOnError: true

        - task: PublishTestResults@2
          displayName: 'Publish JUnit test results'
          inputs:
            testResultsFormat: 'JUnit'
            testResultsFiles: '**/TESTS-*.xml'
            mergeTestResults: true # Optional
            failTaskOnFailedTests: true

        - task: CopyFiles@2
          displayName: 'Copy npm-publish files to ./npm-publish'
          inputs:
            SourceFolder: '$(System.ArtifactsDirectory)/CDN_Content/npm'
            Contents: |
              index.d.ts
              index.js
              package.json
            TargetFolder: './npm-publish/'
            CleanTargetFolder: false
            OverWrite: true

        - task: Npm@1
          condition: 'eq(variables.NpmPublish, true)'
          displayName: 'publish to @laserfiche/types-lf-ui-components'
          inputs:
            command: 'custom'
            workingDir: './npm-publish'
            customCommand: 'publish'
            customRegistry: 'useFeed'
            customFeed: 'b4aac291-96e7-43d0-abcb-8fb49e0ab410'
          env:
            NPM_AUTH_TOKEN: $(npmauthtoken)

        - task: Npm@0
          displayName: 'npm version lf-ui-components'
          inputs:
            cwd: './dist/ui-components'
            command: version
            arguments: '$(NpmPackageVersion) --no-git-tag-version'
          env:
            NPM_AUTH_TOKEN: $(npmauthtoken)

        - task: Npm@1
          condition: 'eq(variables.NpmPublish, true)'
          displayName: 'publish to @laserfiche/lf-ui-components'
          inputs:
            command: 'custom'
            workingDir: './dist/ui-components'
            customCommand: 'publish'
            customRegistry: 'useFeed'
            customFeed: 'b4aac291-96e7-43d0-abcb-8fb49e0ab410'
          env:
            NPM_AUTH_TOKEN: $(npmauthtoken)
