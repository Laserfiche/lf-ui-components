name: lf-ui-components-CI

on:
  push:
    branches: [ '\d+.x' ]
  pull_request:
    branches: [ '\d+.x' ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  NPM_VERSION: "12.0.0"

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build:
    runs-on: ubuntu-latest
    env:
      NPM_TOKEN: dummy
      NPM_USERNAME: dummy
      NPM_EMAIL: dummy
      NPM_REGISTRY: dummy

    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.sha }}

      - name: Echo build number
        run: echo ${{github.run_id}}

      - name: Setup Node.js environment
        uses: actions/setup-node@v2.5.1
        with:
          node-version: '14'

      - name: Npm tool install
        run: npm install -g npm@8

      - name: Npm ci
        run: npm ci

      - name: Npm run lint
        run: npm run lint

# will this work -- does it have to be on windows agent?
      # - name: Npm run test
      #   run: npm run test --watch=false --browsers=ChromeHeadless --reporters "junit,progress"

      # - name: Test Report
      #   uses: dorny/test-reporter@v1
      #   if:  ${{ always() && github.event.pull_request.head.repo.fork == 'false' }}  # fork pr does not permission to write to checks
      #   with:
      #     name: Jest Test Results
      #     path: ./*.xml
      #     reporter: jest-junit
      #     only-summary: 'true'
      #     fail-on-error: 'false'

      - name: Npm run build-ui-components
        run: npm run build-ui-components-prod

      - name: move intellisense-imports.d.ts to entry.d.ts
        run: mv -f ./dist/ui-components/intellisense-imports.d.ts ./dist/ui-components/entry.d.ts

      - name: Npm run tsc-cdn
        run: npm run tsc-cdn

      - name: Npm run api-extractor
        run: npm run api-extractor

      - name: 'gulp processTypesFile: clean up bundled file'
        run: gulp processTypesFile

      - name: 'move enums.js to npm-publish'
        run: cp ./dist/ui-components/esm2015/shared/enums.js ./npm-publish/index.js

# haven't done versioning yet, but that's okay? -- no, it's used for building the documentation?
# has the documentation always had a temp package as it's dependency?
      - name: Npm pack
        run: npm pack 
        working-directory: ./npm-publish

      - name: Npm install local package
        run: npm install ./npm-publish/laserfiche-types-lf-ui-components-1.0.0.tgz

      - name: 'gulp replaceVersionInGettingStarted'
        run: gulp replaceVersionInGettingStarted --npmVersion ${{ env.NPM_VERSION }} --cdnVersion ${{env.NPM_VERSION}}

      - name: Npm run build-lf-documentation-prod
        run: npm run build-lf-documentation-prod

      - name: Npm run build-lf-cdn-prod
        run: npm run build-lf-cdn-prod

      - name: Npm run sass-lf
        run: npm run sass-lf

      - name: Npm run sass-ms
        run: npm run sass-ms

      - name: 'gulp renameMainWebpackChunk'
        run: gulp renameMainWebpackChunk

      - name: 'gulp renameRuntimeWebpackChunk'
        run: gulp renameRuntimeWebpackChunk
        
      - name: 'gulp renamePolyfillsWebpackChunk'
        run: gulp renamePolyfillsWebpackChunk

      - name: concatenate runtime.js, main.js, and polyfills.js into lf-ui-components.js
        run: (cat ./dist/lf-cdn/main.js; echo ""; cat ./dist/lf-cdn/polyfills.js; echo ""; cat ./dist/lf-cdn/runtime.js; echo ""; echo "//# sourceMappingURL=main.js.map") > ./dist/lf-cdn/lf-ui-components.js
        
      - name: 'concatenate runtime.js, main.js, and polyfills.js into lf-documentation.js'
        run: (cat ./dist/lf-documentation/runtime.js; echo ""; cat ./dist/lf-documentation/polyfills.js; echo ""; cat ./dist/lf-documentation/main.js; echo) > ./dist/lf-documentation/lf-documentation.js
        
      - name: 'gulp replaceScriptsInIndexHtml'
        run: gulp replaceScriptsInIndexHtml --buildVersion ${{env.NPM_VERSION}}

      - name: 'move  to npm-publish'
        run: cp ./node_modules/@angular/material/prebuilt-themes/indigo-pink.css ./dist/lf-cdn/indigo-pink.css

# copy cdn and documentation files from dist/lf-cdn and dist/lf-documentation to dist/cdn

      - name: 'create an empty ./dist/ui-components/cdn folder'
        run: 'mkdir -p ./dist/ui-components/cdn'

      - name: 'move lf-ui-components.js to cdn'
        run: mv -t ./dist/ui-components/cdn lf-ui-components.js main.js.map runtime.js.map polyfills.js.map
        working-directory: ./dist/lf-cdn

      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v2.3.1
        with:
          name: npm-publish-artifact
          # A file, directory or wildcard pattern that describes what to upload
          path: |
            ./dist/ui-components
            ./npm-publish
            ./.npmrc
            ./README.md
            ./LICENSE

      - name: echo github run attempt
        run: echo ${{ github.run_attempt }} ${{  github.event.pull_request.head.repo.owner.login }}



  # publish_to_npm_release:
  #   runs-on: ubuntu-latest
  #   environment: npm_production
  #   if: ${{ (github.run_attempt != 1) && (github.run_attempt != 2 && github.event.pull_request.head.repo.owner.login != 'Laserfiche') }}
  #   needs: [ build ]
  #   steps:
          
  #     - name: Download a Build Artifact
  #       uses: actions/download-artifact@v2.1.0
  #       with:
  #         name: npm-publish-artifact

  # need to download, version, publish both packages


#need to do this inside ./npm-publish
      # - name: npm version
      #   run: npm version ${{ env.NpmPackageVersion }} --no-git-tag-version
      #   env:
      #     NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
      #     NPM_USERNAME: ${{ secrets.NPM_USERNAME }}
      #     NPM_EMAIL: ${{ secrets.NPM_EMAIL }}
      #     NPM_REGISTRY: ${{ secrets.NPM_REGISTRY }}
